// 단어시험
//
//1.배열을 사용하는 경우 2가지(조건 2가지)
//	배열해야할 개수가 명확해야하고 , 같은 형태의 데이터 유형이여야 한다.
//	1.데이터들의 타입이 동일한경우
//	2.데이터들의 크기가 고정된경우
//2.int[ ] n = new int[5];
//  배열명과, 배열의 크기는?
//	
//	배열명:n 변수명
//	배열의 크기:5
//
//
//3.2차원 배열 int[][] n = new int[3][10]; 
//  배열로 선언된 int변수는 무엇이 들어있는가?
//	값 
//  n에 들어있는 것은?
//	int[3][10] 주소

//4. 변수에 들어갈 수 있는 2가지를 비교 설명
//	 기본형인가 기본형이 아닌가 , 주소인가
//		값 [기본형 데이터],주소(나머지다)
//5. 변수에 들어갈 수 있는 것에 따라 변수를 구분하여 설명
//	 참조형 데이터는 변수에 주소가 들어가고, 기본형 데이터는 값이 들어간다. 
//		기본형 변수 (값) : 정수 실수 문자 논리
//		참조형 변수 (주소) : 나머지 다 배열 클래스
//6. String클래스에 대해 설명
//   char들을 연결하여 만들어 놓은 클래스
//
//7. switch문안에 들어갈 수 있는 데이타 타입 
//	 char, int, String
//		

//		int  byte short char string
//	
//8. 2차원 배열에서 String[][] s = new String[2][3];
//   length 변수의 개수와 설명
// 		length변수 의 개수 3개 총개수 10개
//		

//		s.length는 2차원의 행개수
//		s[0].length는 첫 번째 행의 개수
//		s[1].length는 첫 번째 행의 개수
//		
//9. 배열의 얕은 복사와 깊은 복사의 차이
//	얕은 복사는 배열의 주소복사
//	깊은 복사는 배열의 주소가 가르키고 있는 값들을 복사


//	 얕은 복사는 주소를 가져오고 깊은복사는 전체를 복사해 온다.
//   얕은 복사의 경우 복사해 오기 전의 값이 변하게 되었을 경우 같이 값이 바뀌는 반면에, 깊은 복사는 원본 배열을 복사해 오기 때문에 기존의 배열이 바뀌더라도 유지된다.

//10. 배열의 얕은 복사를 하면 생기는 문제
// 	  배열안에 들어있는 주소만 복사해와서 배열값이 바뀌게 되면 같이 값이 바뀌게 된다.
//
//		배열의 주소가 가르키고 있는 값들을 복사하는 것이 아니어서 복사원본과 복사본과 하나의 값들을 가르키게된다.
//		원본이나,복사본이 변경된 경우,다른 것도 함께 바뀌게 된다.



//11. 기본형과 참조형인 변수인 경우 초기값은 어떻게 설정되는가?
//   		기본형 변수 초기값은 :값으로 초기화 0, 0.0 ,flase, ""
//   		참조형 변수 초기값은 :null


//			기본형 값중 0,false
//			참조형 : null
//12. final int KEY = 1000;의 의미, final은 어떤 의미가 있는가?
//    이후에 변하지 않는 값 
//    key= 1000


//		key라는 변수에 1000을 넣어라. key라는 변수에 들어있는 값은 변경 불가능하다.
//		상수

//13. array와 arraylist의 차이점
//		 array는 타입이 고정되어있으며
//		 arraylist는 고정되어있지 않다.
//			타입이 고정되어 있지 않다.

//		array는 배열을 의미한다.
//		고정된 길이,같은 타입

//		arraylist는 가변길이,다른타입도 가능하다.


//14. array와 arraylist의 길이를 구하는 방법
//		array는 array.length()      string은 length 
//		arraylist는 .size() . 함수 매서드를 이용해서 구한다.

//15. String의 길이를 구하는 방법
//		.length()
//
//16. String s = "안녕하세요!  반갑습니다!"; 에서 
//     '안'을 추출
//     "반갑"을 추출
//		System.out.println(s.charAt(0)); //안
//
//		System.out.println(s.substring(7, 9)); //반갑

//17. 콘솔에서 입력받을 때 자주 사용하는 클래스의 객체 생성방법(키보드로 입력)
//		Scanner sc = new Scanner(System.in);

//18. int data = sc.nextInt(); 를 설명하시오.
//		스캐너를 사용하여 받은 정수값은 data변수에 저장한다.

//		1.int 타입에 data변수 선언
//		2.scanner로 입력받은 값을 int로 변경하라.
//		3.int 로 변경한 값을 data변수에 저장


//19. String[] s1 = {"감자", "고구마", "양파"}; 그림을 그리고, 참조형 변수 개수와 기본형 변수 개수를 구분하여 설명
//		s1:주소  <-------------[주소1][주소2][주소3] length
//							  주소1 <----[감][자]
//							  주소2 <----[고][구][마]
//							  주소3 <----[양][파]
//참조형 변수(주소) : 4개
//기본형 : 8개
//




//20. int[] s = {11, 22, 33};인 경우 s[0]의 의미, System.out.println(s[0]);의 의미, s[0] = 100의 의미
//	s[0]= s에 저장된 주소가 가르키는 배열중 첫번째 위치 =11
//	System.out.println(s[0]) :s에 저장된 주소가 가르키는 배열중 첫번째 위치 프린트하라
//	s[0] =100 s에 저장된 주소가 가르키는 배열중 첫번째 위치에 100을 저장해라
//	

//21. for (int x: s){
//     System.out.println(x);
//    }의 동작방식
//	for each 이며 스트링 의 처음부터 마지막값까지 실행된다.
//		

//	s가 가르키고 있는 배열을 하나씩 3번 꺼내서 x에 넣은 후 프린트 하세요.
//	x는 3번 재사용, x는 한번선언, x는 1개 만들어졌다.






//22. main메서드 안에 있는 
//     for문 안에서 선언된 i의 생존범위
//   for 문 안에서만 생존한다.


//	int i : 선언 , 
//  선언하는 방법: 타입쓰고 변수쓴다.
//  선언의 의미 : RAM에 변수를 생성
//	선언의 위치 : 그 변수의 생존범위 결정, 변수의 접근가능성이 결정 
//	변수의 생존범위는 그변수의 선언이 포함되어 있는 중간괄호 {} 를 찾아라 ! ! ! 
//	변수의 중간괄호를 찾아야한다.
//	for 문 안에서만 i를 쓸수있다.






//소괄호는 매서드의 입력값이나 조건문일때 ()
//중괄호는 묶을때{}
//대괄호는 배열[]






